Entendido, estás utilizando Laravel con React. La implementación del middleware y la gestión de roles pueden seguir una lógica similar, pero tendrás que considerar la manera en que React maneja la autenticación y las rutas protegidas.

Paso 1: Crear el Middleware de Rol en Laravel
Primero, crea el middleware llamado CheckRole como se mencionó anteriormente:

bash
Copiar código
php artisan make:middleware CheckRole
Define el middleware en app/Http/Middleware/CheckRole.php:

php
Copiar código
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\Auth;

class CheckRole
{
    public function handle($request, Closure $next, ...$roles)
    {
        if (Auth::check() && in_array(Auth::user()->rol_id, $roles)) {
            return $next($request);
        }

        return response()->json(['error' => 'Unauthorized'], 403);
    }
}
Paso 2: Registrar el Middleware en el Routing
Registra el middleware directamente en las rutas de Laravel en routes/web.php:

php
Copiar código
use App\Http\Controllers\SuperAdminController;
use App\Http\Controllers\ResidenteController;
use App\Http\Controllers\PorteroController;
use App\Http\Middleware\CheckRole;

// API routes for role-based access
Route::middleware(['auth', CheckRole::class.':1'])->group(function () {
    Route::get('/api/super-admin', [SuperAdminController::class, 'index']);
});

Route::middleware(['auth', CheckRole::class.':2'])->group(function () {
    Route::get('/api/residente', [ResidenteController::class, 'index']);
});

Route::middleware(['auth', CheckRole::class.':3'])->group(function () {
    Route::get('/api/portero', [PorteroController::class, 'index']);
});
Paso 3: Configurar React para Rutas Protegidas
En el lado de React, puedes configurar rutas protegidas y manejar la redirección basada en roles.

Crear un Contexto de Autenticación
Crea un contexto para manejar la autenticación y el rol del usuario:

javascript
Copiar código
// AuthContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);

    useEffect(() => {
        axios.get('/api/user')
            .then(response => setUser(response.data))
            .catch(() => setUser(null));
    }, []);

    return (
        <AuthContext.Provider value={{ user }}>
            {children}
        </AuthContext.Provider>
    );
};
Crear una Ruta Protegida
Crea un componente para rutas protegidas basado en el rol:

javascript
Copiar código
// ProtectedRoute.js
import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import { useAuth } from './AuthContext';

const ProtectedRoute = ({ component: Component, role, ...rest }) => {
    const { user } = useAuth();

    return (
        <Route
            {...rest}
            render={props =>
                user && user.rol_id === role ? (
                    <Component {...props} />
                ) : (
                    <Redirect to="/" />
                )
            }
        />
    );
};

export default ProtectedRoute;
Configurar Rutas en React
Configura las rutas en tu aplicación React:

javascript
Copiar código
// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { AuthProvider } from './AuthContext';
import ProtectedRoute from './ProtectedRoute';
import SuperAdminDashboard from './SuperAdminDashboard';
import ResidenteDashboard from './ResidenteDashboard';
import PorteroDashboard from './PorteroDashboard';

function App() {
    return (
        <AuthProvider>
            <Router>
                <Switch>
                    <ProtectedRoute path="/super-admin" component={SuperAdminDashboard} role={1} />
                    <ProtectedRoute path="/residente" component={ResidenteDashboard} role={2} />
                    <ProtectedRoute path="/portero" component={PorteroDashboard} role={3} />
                    <Route path="/" component={HomePage} />
                </Switch>
            </Router>
        </AuthProvider>
    );
}

export default App;
Paso 4: Redirigir al Dashboard Correcto Después de Iniciar Sesión
En tu controlador de autenticación en Laravel, redirige al usuario según su rol después de iniciar sesión:

php
Copiar código
use Illuminate\Support\Facades\Auth;

public function login(Request $request)
{
    // lógica de autenticación

    $role = Auth::user()->rol_id;
    $redirectUrl = '';

    switch ($role) {
        case 1:
            $redirectUrl = '/super-admin';
            break;
        case 2:
            $redirectUrl = '/residente';
            break;
        case 3:
            $redirectUrl = '/portero';
            break;
        default:
            $redirectUrl = '/';
    }

    return response()->json(['redirectUrl' => $redirectUrl]);
}
En React, después de la autenticación, redirige al usuario basado en la URL proporcionada por el backend:

javascript
Copiar código
// Login.js
import React, { useState } from 'react';
import axios from 'axios';
import { useHistory } from 'react-router-dom';

const Login = () => {
    const [credentials, setCredentials] = useState({ email: '', password: '' });
    const history = useHistory();

    const handleLogin = async () => {
        try {
            const response = await axios.post('/api/login', credentials);
            history.push(response.data.redirectUrl);
        } catch (error) {
            console.error('Login failed', error);
        }
    };

    return (
        <div>
            <input
                type="email"
                value={credentials.email}
                onChange={(e) => setCredentials({ ...credentials, email: e.target.value })}
            />
            <input
                type="password"
                value={credentials.password}
                onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}
            />
            <button onClick={handleLogin}>Login</button>
        </div>
    );
};

export default Login;
Conclusión
Con esta implementación, Laravel maneja la lógica de autenticación y autorización en el backend, mientras que React gestiona las rutas protegidas y las redirecciones basadas en el rol del usuario. Esto asegura que los usuarios solo tengan acceso a las áreas y funcionalidades correspondientes a sus roles.